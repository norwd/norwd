---

name: "Debug Workflow Run"
run-name: "Debug Workflow Run"
permissions: read-all

on:
  repository_dispatch:
  workflow_dispatch:
  pull_request:
  push:
    paths: ['.github/workflows/debug.yml']

jobs:

  debug-ipsn-go-libtor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
      - run: |
          tee -a main.go << EOF
          package main

          import (
          	"context"
          	"fmt"
          	"log"
          	"net/http"
          	"os"
          	"time"
          
          	"github.com/cretz/bine/tor"
          	"github.com/ipsn/go-libtor"
          )

          func main() {
          	// Start tor with some defaults + elevated verbosity
          	fmt.Println("Starting and registering onion service, please wait a bit...")
          	t, err := tor.Start(nil, &tor.StartConf{ProcessCreator: libtor.Creator, DebugWriter: os.Stderr})
          	if err != nil {
          		log.Panicf("Failed to start tor: %v", err)
          	}
          	defer t.Close()

          	// Wait at most a few minutes to publish the service
          	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
          	defer cancel()

          	// Create an onion service to listen on any port but show as 80
          	onion, err := t.Listen(ctx, &tor.ListenConf{RemotePorts: []int{80}})
          	if err != nil {
          		log.Panicf("Failed to create onion service: %v", err)
          	}
          	defer onion.Close()

          	fmt.Printf("Please open a Tor capable browser and navigate to http://%v.onion\n", onion.ID)

          	// Run a Hello-World HTTP service until terminated
          	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
          		fmt.Fprintf(w, "Hello, Tor!")
          	})
          	http.Serve(onion, nil)
          }
          EOF
      - run: go run main.go

  debug-tor:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt install -y tor
      - run: curl --proxy socks5h://localhost:9050 https://check.torproject.org/api/ip | jq

  debug-matrix-object-dereference:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        key:
          - "a"
          - "b"
          - "c"
    steps:
      - id: a
        run: echo "key=a value" | tee -a "${GITHUB_OUTPUT}"
      - id: b
        run: echo "key=b value" | tee -a "${GITHUB_OUTPUT}"
      - id: c
        run: echo "key=c value" | tee -a "${GITHUB_OUTPUT}"
      - run: echo "${{ steps[matrix.key].outputs.key }}"
      - id: values
        run: |
          tee -a << EOF | tee -a "${GITHUB_OUTPUT}"
          key_a=a value 2
          key_b=b value 2
          key_c=c value 2
          EOF
      - run: echo "${{ steps.values.outputs[format('key_{0}', matrix.key)] }}"

  debug-matrix-conditional:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shouldRun:
          - true
          - false
    steps:
      - run: echo "${{ matrix.shouldRun }}"
        if: ${{ matrix.shouldRun }}

  debug-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - run: echo "${JSON}"
        env:
          JSON: ${{ toJSON(github.event) }}

  debug-ubuntu-arm:
    name: "Debug ${{ matrix.runner }}"
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - ubuntu-24.04-arm
          - ubuntu-22.04-arm

    steps:
      - run: echo "${RUNNER_JSON}"
        env:
          RUNNER_JSON: ${{ toJSON(runner) }}

  debug-matrix:
    name: "Debug ${{ format('{0}{1}{1} {2} {3}{3}', '$', '{', 'matrix', '}') }}"
    runs-on: ubuntu-latest
    steps:
      - name: "Debug ${{ format('{0}{1}{1} {2} {3}{3}', '$', '{', 'matrix', '}') }}"
        run: echo "${MATRIX}"
        env:
          MATRIX: ${{ toJSON(matrix) }}

    strategy:
      matrix:
        value1:
          - "a"
          - "b"
        value2:
          - "1"
          - "2"

  debug-github-context:
    name: "Debug ${{ format('{0}{1}{1} {2} {3}{3}', '$', '{', 'github', '}') }} context"
    runs-on: ubuntu-latest
    steps:
      - name: "Debug ${{ format('{0}{1}{1} {2} {3}{3}', '$', '{', 'github', '}') }} context"
        run: echo "${GITHUB_CONTEXT}"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}

      - name: "Debug manual object construction"
        run: echo "${DEBUG}"
        env:
          DEBUG: |
            ${{
              toJSON(
                fromJSON(
                  format('
            {{
              "foo": {0},
              "bar": {1}
            }}'
                    , toJSON(github.event_type)
                    , toJSON(github.event)
                  )
                )
              )
            }}

  debug-ubuntu-24-04:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install -g bats
      - run: bats -v
