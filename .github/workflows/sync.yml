---

name: "Syncing Forks"
run-name: "Syncing Forks"
permissions: {}

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
  push: {paths: [.github/workflows/sync.yml]}
  schedule:
    - cron: "0 * * * *" # note, also update SECONDS_BETWEEN_RUNS if you change this

env:
  GH_TOKEN: ${{ secrets.SYNC_FORKS_NORWD }}
  REPO_OWNER: ${{ github.repository_owner }}

jobs:
  list-forks:
    name: "List Forks"
    runs-on: ubuntu-latest

    outputs:
      json: ${{ steps.json.outputs.json }}

    steps:
      - name: "Install moreutils"
        run: sudo apt-get install -y moreutils

      - id: list-orgs
        name: "List Orgs"
        run: gh api "${ENDPOINT}" --jq "${JQ_QUERY}" | tee -a orgs.json
        env:
          ENDPOINT: '/users/${{ github.repository_owner }}/orgs' # use 'user/orgs' (yes, singluar 'user') to include orgs with private membership
          JQ_QUERY: '[ .[].login ] + (if env.REPO_OWNER then [ env.REPO_OWNER ] else [] end)'

      - id: list-forks
        name: "List Forks"
        run: jq --raw-output '.[]' orgs.json | xargs -IREPO_OWNER gh repo list REPO_OWNER --fork --no-archived --limit 1000 --json "${JQ_PROPS}" --jq "${JQ_QUERY}" | jq --slurp | tee -a forks.json
        env:
          JQ_PROPS: 'name,owner,nameWithOwner,parent,createdAt,pushedAt,updatedAt'
          JQ_QUERY: '.[]'

      - id: buildScriptToListForksThatAreOutOfDate
        name: "Build Script to List Forks That Are Out Of Date"
        run: jq --raw-output "${JQ_QUERY}" forks.json | tee -a getForksThatAreOutOfDate.sh
        env:
          JQ_QUERY: |
            .[] | "gh api \"/repos/\(.parent.owner.login)/\(.parent.name)/branches/$(gh api '/repos/\(.parent.owner.login)/\(.parent.name)' --jq '.default_branch')\" --jq 'if ([ .commit.commit | .author.date, .committer.date | fromdateiso8601 ] | max | todateiso8601) > \"\(.updatedAt)\" then { source: \"\(.parent.owner.login)/\(.parent.name)\", fork: \"\(.nameWithOwner)\" } else empty end'"

      - id: list-forksThatAreOutOfDate
        name: "List Forks That Are Out Of Date"
        run: sh getForksThatAreOutOfDate.sh | jq --slurp | tee -a forksThatAreOutOfDate.json

      - id: json
        name: "Build Output JSON"
        run: jq --raw-output --compact-output '.[]' forksThatAreOutOfDate.json | sort --random-sort | jq --slurp --raw-output "${JQ_QUERY}" | tee -a "${GITHUB_OUTPUT}"
        env:
          JQ_QUERY: '"json=\([.[:256][]])"'

      - name: "Report Forks to Sync"
        run: jq --raw-output "${JQ_QUERY}" forksThatAreOutOfDate.json | tee -a "${GITHUB_STEP_SUMMARY}"
        env:
          JQ_QUERY: '.[] | "* Queuing [\(.fork)](https://github.com/\(.fork)) sync from [\(.source)](https://github.com/\(.source))"'

  sync:
    name: "Sync Forks"
    runs-on: ubuntu-latest
    needs: list-forks
    timeout-minutes: 120

    concurrency:
      group: sync-forks-${{ join(matrix.*, '-') }}
      cancel-in-progress: false

    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include: ${{ fromJSON(needs.list-forks.outputs.json) }}

    env:
      FORK: ${{ matrix.fork }}
      SOURCE: ${{ matrix.source }}

    steps:
      - id: delay
        name: "Pick delay"
        run: gh api "${ENDPOINT}" --jq "${JQ_QUERY}" | tee -a "${GITHUB_OUTPUT}"
        env:
          ENDPOINT: '/rate_limit'
          JQ_QUERY: '"seconds=\([ .resources[] | select(.used != 0) | ( (.used / .limit) * (.reset - ( now | tonumber | floor ) | abs) ) ] + [0] | max | ceil)"'

      - name: "Wait ${{ steps.delay.outputs.seconds }} Seconds" # wait a bit to prevent rate limiting with so many other jobs going
        run: sleep "${SECONDS}"
        env:
          SECONDS: ${{ steps.delay.outputs.seconds }}

      - name: "Pick Branch to Sync To"
        run: |
          {
            gh api "/repos/${FORK}" --paginate --jq '"\"\(.default_branch)\""'
            gh api "/repos/${FORK}/branches" --paginate --jq '"\"\(.[] | select(.name == "upstream" and .protected).name)\""'
          } | jq --slurp --raw-output '"BRANCH=\(.[1] // .[0])"' | tee -a "${GITHUB_ENV}"

      - id: sync
        name: "Sync ${{ matrix.fork }} from ${{ matrix.source }}"
        run: gh repo sync "${FORK}" --source "${SOURCE}" --branch "${BRANCH}"

      - if: ${{ failure() && steps.sync.outcome == 'failure' }}
        name: "Report Sync Failure"
        run: |
          tee -a "${GITHUB_STEP_SUMMARY}" << EOF
          # Failed to sync ${FORK} from ${SOURCE}

          Click [here][SYNC] to manually sync [${FORK}][FORK] from [${SOURCE}][SOURCE].

          [FORK]: $(gh repo view "${FORK}" --json 'url' --jq '.url')
          [SOURCE]: $(gh repo view "${SOURCE}" --json 'url' --jq '.url')
          [SYNC]: https://github.com/${FORK}/compare/${BRANCH}...$(gh repo view "${SOURCE}" --json 'owner,defaultBranchRef,name' --jq '.owner.login + ":" + .name + ":" + .defaultBranchRef.name')
          EOF
